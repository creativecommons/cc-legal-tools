###############################################################################
# DISABLED - NOT CURRENTLY USING ##############################################
# vim: set ft=python ##########################################################
###############################################################################
"""
Since the metadata is already imported during migrations before
this test runs, we just check out a sampling of data that we
expect to exist.
"""
# Standard library
import datetime

# Third-party
from django.test import TestCase

# First-party/Local
from licenses.import_metadata_from_rdf import MetadataImporter
from licenses.models import (
    LegalCode,
    License,
    LicenseLogo,
    TranslatedLicenseName,
)


class MetadataTest(TestCase):
    def test_repeated_import(self):
        # It should be safe to import the data again, just a no-op
        MetadataImporter(
            LegalCode, License, LicenseLogo, TranslatedLicenseName
        ).import_metadata(open("index.rdf", "rb"))

    def test_import_from_scratch(self):
        # Some of the import code only runs when things don't already exist, so
        # delete most of the data and run it.
        License.objects.all().delete()
        LegalCode.objects.all().delete()
        TranslatedLicenseName.objects.all().delete()
        MetadataImporter(
            LegalCode, License, LicenseLogo, TranslatedLicenseName
        ).import_metadata(open("index.rdf", "rb"))

    def test_mit_license(self):
        license = License.objects.get(license_code="MIT")
        self.assertEqual("", license.creator_url)
        self.assertEqual(
            "http://creativecommons.org/license/software",
            license.license_class_url,
        )

        self.assertTrue(license.permits_derivative_works)
        self.assertTrue(license.permits_distribution)
        self.assertTrue(license.permits_reproduction)
        self.assertTrue(license.requires_notice)

        self.assertFalse(license.requires_attribution)
        self.assertFalse(license.requires_source_code)
        self.assertFalse(license.requires_share_alike)
        self.assertFalse(license.prohibits_commercial_use)
        self.assertFalse(license.prohibits_high_income_nation_use)

    def test_bsd(self):
        license = License.objects.get(license_code="BSD")
        self.assertEqual("", license.creator_url)
        self.assertEqual(
            "http://creativecommons.org/license/software",
            license.license_class_url,
        )

        self.assertTrue(license.permits_derivative_works)
        self.assertTrue(license.permits_distribution)
        self.assertTrue(license.permits_reproduction)
        self.assertTrue(license.requires_notice)

        self.assertFalse(license.requires_attribution)
        self.assertFalse(license.requires_share_alike)
        self.assertFalse(license.requires_source_code)
        self.assertFalse(license.prohibits_commercial_use)
        self.assertFalse(license.prohibits_high_income_nation_use)

    def test_40_by_nc_nd(self):
        license = License.objects.get(version="4.0", license_code="by-nc-nd")
        self.assertEqual("http://creativecommons.org", license.creator_url)
        self.assertEqual(
            "http://creativecommons.org/license/", license.license_class_url
        )

        self.assertTrue(license.requires_attribution)
        self.assertTrue(license.requires_notice)
        self.assertTrue(license.permits_reproduction)
        self.assertTrue(license.permits_distribution)
        self.assertTrue(license.prohibits_commercial_use)

        self.assertFalse(license.requires_share_alike)
        self.assertFalse(license.requires_source_code)
        self.assertFalse(license.permits_derivative_works)
        self.assertFalse(license.prohibits_high_income_nation_use)

        legalcodes = list(license.legal_codes.all())
        self.assertEqual(1, len(legalcodes))
        legalcode = legalcodes[0]
        self.assertEqual(
            legalcode.url,
            "http://creativecommons.org/licenses/by-nc-nd/4.0/legalcode",
        )
        self.assertEqual(legalcode.language_code, "en")

        tname = TranslatedLicenseName.objects.get(
            license=license,
            language_code="it",
        )
        self.assertEqual(
            "Attribuzione - Non commerciale - Non opere derivate 4.0"
            " Internazionale",
            tname.name,
        )

    def test_40_by_sa(self):
        license = License.objects.get(version="4.0", license_code="by-sa")
        self.assertEqual("http://creativecommons.org", license.creator_url)
        self.assertEqual(
            "http://creativecommons.org/license/", license.license_class_url
        )

        self.assertTrue(license.requires_attribution)
        self.assertTrue(license.requires_notice)
        self.assertTrue(license.requires_share_alike)
        self.assertTrue(license.permits_derivative_works)
        self.assertTrue(license.permits_reproduction)
        self.assertTrue(license.permits_distribution)

        self.assertFalse(license.requires_source_code)
        self.assertFalse(license.permits_sharing)
        self.assertFalse(license.prohibits_commercial_use)
        self.assertFalse(license.prohibits_high_income_nation_use)
        tname = TranslatedLicenseName.objects.get(
            license=license,
            language_code="af",
        )
        self.assertEqual(
            "Erkenning-InsgelyksDeel 4.0 International", tname.name
        )

    def test_30_by_nc_nd_es(self):
        license = License.objects.get(
            about="http://creativecommons.org/licenses/by-nc-nd/3.0/es/"
        )
        # This one has a source
        self.assertEqual(
            "http://creativecommons.org/licenses/by-nc-nd/3.0/",
            license.source.about,
        )
        self.assertEqual("http://creativecommons.org", license.creator_url)
        self.assertEqual(
            "http://creativecommons.org/license/", license.license_class_url
        )
        self.assertEqual("es", license.jurisdiction_code)
        self.assertTrue(license.requires_attribution)
        self.assertTrue(license.requires_notice)
        self.assertTrue(license.permits_reproduction)
        self.assertTrue(license.permits_distribution)
        self.assertTrue(license.prohibits_commercial_use)

        self.assertFalse(license.requires_share_alike)
        self.assertFalse(license.requires_source_code)
        self.assertFalse(license.permits_derivative_works)
        self.assertFalse(license.prohibits_high_income_nation_use)

        # one of six legalcodes for this one
        legalcode = license.legal_codes.get(language_code="es")
        self.assertEqual(
            legalcode.url,
            "http://creativecommons.org/licenses/by-nc-nd/3.0/es/legalcode.es",
        )
        self.assertEqual(legalcode.language_code, "es")

        tname = TranslatedLicenseName.objects.get(
            license=license,
            language_code="id",
        )
        self.assertEqual(
            "Atribusi-NonKomersial-TanpaTurunan 3.0 Spanyol", tname.name
        )

        # Two logos
        logos = LicenseLogo.objects.filter(license=license)
        self.assertCountEqual(
            [
                "https://i.creativecommons.org/l/by-nc-nd/3.0/es/80x15.png",
                "https://i.creativecommons.org/l/by-nc-nd/3.0/es/88x31.png",
            ],
            list(logos.values_list("image", flat=True)),
        )

    def test_is_replaced_by(self):
        license = License.objects.get(
            about="http://creativecommons.org/licenses/by/2.0/hr/"
        )
        self.assertEqual(
            "http://creativecommons.org/licenses/by/2.5/hr/",
            license.is_replaced_by.about,
        )

    def test_is_based_on(self):
        license = License.objects.get(
            about="http://creativecommons.org/licenses/by-nc-nd/2.0/jp/"
        )
        self.assertEqual(
            "http://creativecommons.org/licenses/by-nc-nd/2.0/",
            license.is_based_on.about,
        )

    def test_deprecated_on(self):
        license = License.objects.get(
            about="http://creativecommons.org/licenses/sa/1.0/fi/"
        )
        # 2004-05-25
        self.assertEqual(datetime.date(2004, 5, 25), license.deprecated_on)

    def test_english_is_default(self):
        with self.subTest("legal code"):
            # Here's a Legalcode that did not have a language in the RDF
            legalcode = LegalCode.objects.get(
                url="http://creativecommons.org/publicdomain/zero/1.0/"
                "legalcode"
            )
            # It should be using English
            self.assertEqual("en", legalcode.language_code)
        with self.subTest("title"):
            bsd_license = License.objects.get(
                about="http://creativecommons.org/licenses/BSD/"
            )
            title = TranslatedLicenseName.objects.get(
                license=bsd_license, name="BSD License"
            )
            self.assertEqual("en", title.language_code)
